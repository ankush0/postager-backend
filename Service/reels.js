var user = require('../Database/Model/User');
var Post = require('../Database/Model/Posts');
var Brand = require('../Database/Model/Brand');
var jwt = require("jsonwebtoken");
const axios = require('axios');
const { IgApiClient } = require('instagram-private-api');
const { get } = require('request-promise');
const CronJob = require("cron").CronJob
const schedule = require('node-schedule');
const Transporter = require('../Mail/Transporter');
var { LocalStorage } = require('node-localstorage');
const serverfile = require('../server.js');
var upload = serverfile.upload
const Instagram = require("../Controllers/Instagram");
const Facebook = require("../Controllers/Facebook");

// constructor function to create a storage directory inside our project for all our localStorage setItem.
var localStorage = new LocalStorage('./Localstorage');


exports.Reels_To_All_SocialMedia_Immediatly = async (req, res) => {
    try {
        var errorstaus = false;
        if (req.body.Platform && req.body.userid.match(/^[0-9a-fA-F]{24}$/) && req.body.Brand && req.body.Brand.match(/^[0-9a-fA-F]{24}$/)) {
            // console.log(req.file);
            var userdata = await user.findById(req.body.userid, function (err, result) {

                if (err) throw err;
            })
            var branddata = await Brand.findById(req.body.Brand, function (err, result) {

                if (err) throw err;
            })
            var Image =  process.env.IMG_URL + req?.file?.filename;
            
            // var Image =  'https://8bittask.com/june/WhatsApp05.mp4';
            // var Image = "https://clownfish-app-givcu.ondigitalocean.app/images/mypic-1695144114881.jpg";
            var instagrampostid = "";
            var instagramMSG = "";
            var currentPoststack = userdata.Posts;            

            if (req.body.Platform.includes("instagram")) {
                console.log("-----------Instagram------------");
                for (let [key, value] of branddata.instagramcredential) {
                    console.log(key);
                    let containerParams = new URLSearchParams();
                    var pageid = key;
                    var accesstoken = value;
                    response = await Instagram.reelsToInsta(pageid, accesstoken, Image, req.body.Content );
                    console.log(response);
                    if(response?.code=='ERR_BAD_REQUEST'){
                        instagramMSG = response.response.data.error.message;
                    }else{
                        instagramMSG = "Posted on Instagram succesfull";
                    }
                    instagrampostid = response;
                }
            }

            var facebookpostid = "";                
            var facebookMSG = "";

            if (req.body.Platform.includes("facebook")) {
                console.log("-----------facebook reels------------");
                for (let [key, value] of branddata.facebookcredential) {
                    let containerParams = new URLSearchParams();
                    var pageid = key;
                    var accesstoken = value;
                    response = await Facebook.reels(pageid, accesstoken, Image, req.body.Content );
                    console.log(response);
                    if(response?.code=='ERR_BAD_REQUEST'){
                        facebookMSG = response.response.data.error.message;
                    }else{
                        facebookMSG = "Posted on Facebook succesfull";
                    }
                    facebookpostid = response;
                }
            }

            var twitterPostID = "";                
            var twitterPostIDMSG = "";

            if (req.body.Platform.includes("Twitter")) {
                // const TwitterApi = require('twitter-api-v2');
                const { TwitterApi } = require('twitter-api-v2');
                console.log("-----------twit------------");
                const client = new TwitterApi({
                    appKey: "frE99Sn3FBj0pB43iTAuEiAny",
                    appSecret: "824gCARU9VA0MQAINXKcgkeSt8w8luXOF5O1KA20P3KaWUhwAs",
                    accessToken: branddata.twitterAccessToken,
                    accessSecret: branddata.twitterAccessSecret,
                  });
                if(req?.file?.filename){

                    try {                            
                            // You can use media IDs generated by v1 API to send medias!
                            const mediaId = await client.v1.uploadMedia('uploads/'+req?.file?.filename,'./uploads/'+req?.file?.filename);
                            const response = await client.v2.tweetThread([
                            // 'Hello, lets talk about Twitter!',
                            { text: req.body.Content, media: { media_ids: [mediaId] } },
                            // 'This thread is automatically made with twitter-api-v2 :D',
                            ]);
                            twitterPostIDMSG = "Posted on Twitter succesfull";
                            twitterPostID = response[0].data.id;
                        } catch (error) {
                            twitterPostIDMSG = error.data.error;
                            // pinterestPostIDMSG = error.response.data.message;
                        }  
                    
                }else{
                    const { data: createdTweet } = await client.v2.tweet(req.body.Content);
                    console.log('Tweet', createdTweet.id, ':', createdTweet.text);
                }
            }
            

            var post = new Post({
                userid: req.body.userid,
                instapostid: instagrampostid,
                Createdat: new Date(),
                Scheduledat: new Date(),
                Status: "Live",
                Platform: req.body.Platform,
                type: "Reels",
                Image: Image,
                Brand: req.body.Brand
            });
            var post_saved = await post.save();
            currentPoststack.push(post_saved._id);
            await user.updateOne({ "_id": req.body.userid }, { "Posts": currentPoststack }, function (error, response) {
                if (error) {
                    console.log(error);
                }
            });
            res.json({ msg: instagramMSG+","+facebookMSG, status: 1 });
        }
        else {
            res.json({
                status: 0,
                msg: "Send All Necessary and valid Details"
            })
        }
    } catch (err) {
        res.json({
            status: 0,
            msg: "error in Server"
        })
        console.log(err);
    }
}
exports.Post_To_All_SocialMedia_Scheduling = async (req, res) => {
    if (req.body.Platform && req.body.Date && req.body.userid.match(/^[0-9a-fA-F]{24}$/) && req.body.Content && req.body.Brand) {

        var userdata = await user.findById(req.body.userid, function (err, result) {

            if (err) {
                console.log(err);
                res.json({
                    status: 0,
                    msg: "check your Credentials or internal server error"

                })


            }

        })



        // console.log(userdata);
        // if (userdata) {

        //     if (userdata.facebookid && userdata.facebooktoken && userdata.Instagramid && userdata.Instagramtoken) {
                // console.log(photopath);

                // var Instagramid=req.body.Instagramid;
                var Content = req.body.Content;



                var currentPoststack = userdata.Posts;

                var Content = req.body.Content;
                var Image = 'http://localhost:4000/images/';

                var base = 'https://graph.facebook.com/'

                var post = new Post({

                    userid: req.body.userid,
                    instapostid: "",
                    facebookpostid: "",
                    Createdat: req.body.Date,
                    Scheduledat: Date(),
                    Status: "Scheduled",
                    Platform: req.body.Platform,
                    Brand: req.body.Brand


                });

                var postsave = await post.save();

                // currentPoststack.push(postsave._id);
                // console.log(req.body.userid);

                // await user.findByIdAndUpdate(req.body.userid, { "Posts": currentPoststack }, function (err, docs) {

                //     if (err) {
                //         console.log(err)
                //     }
                //     else {
                //         console.log("User Post has been  Updated");
                //     }

                // });

                // const date = new Date(req.body.Date).toJSON();



                // if (req.body.Platform.includes("Facebook")) {
                //     localStorage.setItem("Facebook" + postsave._id, "Facebook Post Scheduled at " + date + "current timing" + new Date());
                //     schedule.scheduleJob(date, async function () {
                //         console.log("Facebook executing function has been called")

                //         posttoFacebookScheduled(userdata.facebookid, Image, Content, userdata.facebooktoken, postsave._id)


                //     })
                // }

                // if (req.body.Platform.includes("Instagram")) {


                //     localStorage.setItem("Instagram" + postsave._id, "Instagram Post Scheduled at " + date + "current timing" + new Date());
                //     const job = schedule.scheduleJob(date, function (y) {

                //         console.log("Instagram Scheduled function is Executing now");
                //         postToInstaScheduled(userdata.Instagramid, Content, Image, userdata.Instagramtoken, postsave._id);

                //     });
                // }




                res.json({
                    code: 1,
                    msg: "post has been Scheduled  succesfully"
                });


        //     }
        //     else {
        //         res.json({
        //             status: 0,
        //             msg: "you have not saved valid Credential saved in database"

        //         })

        //     }

        // }
        // else {

        //     res.json({
        //         status: 0,
        //         msg: "check your Credential User does not exist"

        //     })

        // }




    }
    else {

        res.json({

            status: 0,
            msg: "Send All Necessary and valid Details"
        })
    }
}

exports.Show_